import express, { Request, Response, NextFunction } from 'express';
import * as line from '@line/bot-sdk';

// --- (1) ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Config ---
// Bun ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î .env ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
const lineConfig: line.MiddlewareConfig & line.ClientConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN || '',
  channelSecret: process.env.LINE_CHANNEL_SECRET || '',
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE Client ‡πÅ‡∏•‡∏∞ Middleware
const client = new line.Client(lineConfig);
const middleware = line.middleware(lineConfig);

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Express App
const app = express();
const port = process.env.PORT || 8080;

// --- (2) ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å LINE ---
// Endpoint ‡∏ô‡∏µ‡πâ LINE ‡∏à‡∏∞‡∏¢‡∏¥‡∏á‡∏°‡∏≤‡∏´‡∏≤‡πÄ‡∏£‡∏≤
app.post(
  '/webhook',
  middleware,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const events: line.WebhookEvent[] = req.body.events;

      // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å Events ‡∏ó‡∏µ‡πà LINE ‡∏™‡πà‡∏á‡∏°‡∏≤
      const results = await Promise.all(
        events.map(handleEvent)
      );

      // ‡∏™‡πà‡∏á 200 OK ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ LINE
      res.json(results);
    } catch (err: unknown) {
      if (err instanceof Error) {
        console.error(err.message);
      } else {
        console.error(err);
      }
      res.status(500).end();
    }
  }
);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event
async function handleEvent(event: line.WebhookEvent): Promise<any> {
  // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Event ‡∏ó‡∏µ‡πà‡∏°‡∏µ source.userId
  if (!event.source || !event.source.userId) {
    return Promise.resolve(null);
  }

  const userId = event.source.userId;
  console.log(`‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Event ‡∏à‡∏≤‡∏Å userId: ${userId}`);

  // ---- ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ----
  //
  // **‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏≤ `userId` ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Database (‡πÄ‡∏ä‡πà‡∏ô PostgreSQL, MySQL, SQLite, Firestore ‡∏Ø‡∏•‡∏Ø)**
  // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ User ‡∏Ñ‡∏ô‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡πÄ‡∏Ç‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÑ‡∏î‡πâ
  //
  // ‡πÄ‡∏ä‡πà‡∏ô saveToDatabase(userId);
  //
  // -------------------------

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ
  switch (event.type) {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ User ‡πÅ‡∏≠‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    case 'follow':
      console.log(`User ${userId} ‡πÅ‡∏≠‡∏î‡∏ö‡∏≠‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô`);
      // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏î‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô!',
      });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ User ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    case 'message':
      if (event.message.type === 'text') {
        console.log(`User ${userId} ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${event.message.text}`);
        // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö" (Reply) ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡∏™‡πà‡∏á" (Push)
        // ‡∏Å‡∏≤‡∏£ Reply ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ (Token ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏õ‡πä‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
        return client.replyMessage(event.replyToken, {
          type: 'text',
          text: `‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: ${event.message.text}`,
        });
      }
      break;

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ User ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ö‡∏≠‡∏ó
    case 'unfollow':
      console.log(`User ${userId} ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ö‡∏≠‡∏ó`);
      // ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏õ‡∏•‡∏ö userId ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Database ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      // (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß)
      break;

    default:
      return Promise.resolve(null);
  }
}

// --- (3) ‡∏™‡πà‡∏ß‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 1-to-1 (Push API) ---
// Endpoint ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ "Push"
// ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á Endpoint ‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏¢‡∏¥‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö Admin ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
app.post(
  '/send-message',
  express.json(), // ‡πÉ‡∏ä‡πâ express.json() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô req.body
  async (req: Request, res: Response): Promise<void> => {
    try {
      const { targetUserId, messageText } = req.body;

      if (!targetUserId || !messageText) {
        res.status(400).json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ targetUserId ‡πÅ‡∏•‡∏∞ messageText' });
        return;
      }

      // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Push API
      await client.pushMessage(targetUserId, {
        type: 'text',
        text: messageText,
      });

      console.log(`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Push "${messageText}" ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${targetUserId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      res.json({ success: true, message: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß' });
    } catch (err: unknown) {
      if (err instanceof Error) {
        console.error(err.message);
      } else {
        console.error(err);
      }
      res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°' });
    }
  }
);

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ)
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  if (err instanceof line.SignatureValidationFailed) {
    res.status(401).send(err.message);
    return;
  }
  if (err instanceof line.JSONParseError) {
    res.status(400).send(err.message);
    return;
  }
  console.error(err);
  res.status(500).end();
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏° Server
app.listen(port, () => {
  console.log(`üöÄ Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà http://localhost:${port}`);
});